// Code generated by MockGen. DO NOT EDIT.
// Source: calories-counter/models (interfaces: UserDatastore)

// Package user_datastore is a generated GoMock package.
package user_datastore

import (
	models "calories-counter/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserDatastore is a mock of UserDatastore interface
type MockUserDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatastoreMockRecorder
}

// MockUserDatastoreMockRecorder is the mock recorder for MockUserDatastore
type MockUserDatastoreMockRecorder struct {
	mock *MockUserDatastore
}

// NewMockUserDatastore creates a new mock instance
func NewMockUserDatastore(ctrl *gomock.Controller) *MockUserDatastore {
	mock := &MockUserDatastore{ctrl: ctrl}
	mock.recorder = &MockUserDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDatastore) EXPECT() *MockUserDatastoreMockRecorder {
	return m.recorder
}

// DeleteMeal mocks base method
func (m *MockUserDatastore) DeleteMeal(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeal indicates an expected call of DeleteMeal
func (mr *MockUserDatastoreMockRecorder) DeleteMeal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeal", reflect.TypeOf((*MockUserDatastore)(nil).DeleteMeal), arg0, arg1)
}

// DeleteUser mocks base method
func (m *MockUserDatastore) DeleteUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUserDatastoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserDatastore)(nil).DeleteUser), arg0, arg1)
}

// GetMeal mocks base method
func (m *MockUserDatastore) GetMeal(arg0, arg1 string) (*models.Meal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeal", arg0, arg1)
	ret0, _ := ret[0].(*models.Meal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeal indicates an expected call of GetMeal
func (mr *MockUserDatastoreMockRecorder) GetMeal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeal", reflect.TypeOf((*MockUserDatastore)(nil).GetMeal), arg0, arg1)
}

// GetMeals mocks base method
func (m *MockUserDatastore) GetMeals(arg0 string, arg1, arg2 int, arg3 string) (models.MealSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeals", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.MealSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeals indicates an expected call of GetMeals
func (mr *MockUserDatastoreMockRecorder) GetMeals(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeals", reflect.TypeOf((*MockUserDatastore)(nil).GetMeals), arg0, arg1, arg2, arg3)
}

// GetSettings mocks base method
func (m *MockUserDatastore) GetSettings(arg0 string) (*models.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0)
	ret0, _ := ret[0].(*models.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings
func (mr *MockUserDatastoreMockRecorder) GetSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockUserDatastore)(nil).GetSettings), arg0)
}

// GetUser mocks base method
func (m *MockUserDatastore) GetUser(arg0, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserDatastoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDatastore)(nil).GetUser), arg0, arg1)
}

// GetUserById mocks base method
func (m *MockUserDatastore) GetUserById(arg0, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById
func (mr *MockUserDatastoreMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserDatastore)(nil).GetUserById), arg0, arg1)
}

// GetUserPassword mocks base method
func (m *MockUserDatastore) GetUserPassword(arg0, arg1 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPassword indicates an expected call of GetUserPassword
func (mr *MockUserDatastoreMockRecorder) GetUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*MockUserDatastore)(nil).GetUserPassword), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockUserDatastore) GetUsers(arg0 string, arg1, arg2 int, arg3 string) (models.UserSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.UserSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockUserDatastoreMockRecorder) GetUsers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserDatastore)(nil).GetUsers), arg0, arg1, arg2, arg3)
}

// SaveMeal mocks base method
func (m *MockUserDatastore) SaveMeal(arg0 string, arg1 models.Meal) (*models.Meal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMeal", arg0, arg1)
	ret0, _ := ret[0].(*models.Meal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMeal indicates an expected call of SaveMeal
func (mr *MockUserDatastoreMockRecorder) SaveMeal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMeal", reflect.TypeOf((*MockUserDatastore)(nil).SaveMeal), arg0, arg1)
}

// SaveRootUser mocks base method
func (m *MockUserDatastore) SaveRootUser(arg0, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRootUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRootUser indicates an expected call of SaveRootUser
func (mr *MockUserDatastoreMockRecorder) SaveRootUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRootUser", reflect.TypeOf((*MockUserDatastore)(nil).SaveRootUser), arg0, arg1)
}

// SaveUser mocks base method
func (m *MockUserDatastore) SaveUser(arg0, arg1, arg2 string, arg3 int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockUserDatastoreMockRecorder) SaveUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserDatastore)(nil).SaveUser), arg0, arg1, arg2, arg3)
}

// UpdateMeal mocks base method
func (m *MockUserDatastore) UpdateMeal(arg0 string, arg1 models.Meal) (*models.Meal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeal", arg0, arg1)
	ret0, _ := ret[0].(*models.Meal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeal indicates an expected call of UpdateMeal
func (mr *MockUserDatastoreMockRecorder) UpdateMeal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeal", reflect.TypeOf((*MockUserDatastore)(nil).UpdateMeal), arg0, arg1)
}

// UpdateSettings mocks base method
func (m *MockUserDatastore) UpdateSettings(arg0 string, arg1 models.Settings) (*models.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettings", arg0, arg1)
	ret0, _ := ret[0].(*models.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettings indicates an expected call of UpdateSettings
func (mr *MockUserDatastoreMockRecorder) UpdateSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockUserDatastore)(nil).UpdateSettings), arg0, arg1)
}

// UpdateUser mocks base method
func (m *MockUserDatastore) UpdateUser(arg0 models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserDatastoreMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserDatastore)(nil).UpdateUser), arg0)
}
